package NeighbourhoodSelectors;

import java.util.ArrayList;

import Main.Location;
import Main.Route;

/**
 * Step function - Selects best neighbour/Route from  Neighbourhood/Routes
 */
public class BestNeighbourSelector {

	/**
	 * Select the best neighbour from all the neighbours generated by 2opt,
	 * works by calculating cost of route and keeping best route.
	 * at the end best route is best neighbour
	 * @param neighbours the neighbours
	 * @return the route
	 */
	public Route selectBestNeighbour(ArrayList<Route> neighbours) {
		
		Route bestRoute = neighbours.get(0);
		double currentBestCost = bestRoute.getCostOfRoute();
		for(Route route:neighbours) {
			double routeCost = route.getCostOfRoute();
			if(routeCost<currentBestCost) {
				bestRoute = route;
				currentBestCost = routeCost;
			}
		}
		return bestRoute;
	}
	

}
